@typeparam TItem

<MudExpansionPanel>
    <TitleContent>
        <MudText>@OptionName : @(EditOptions.Count) Entries</MudText>
    </TitleContent>
    <ChildContent>
        <MudTable T="string" Items="EditOptions">
            <ToolBarContent>
                <MudGrid>
                    <MudItem md="4">
                        <InputFile OnChange="InputFileChanged"></InputFile>
                    </MudItem>
                    <MudItem md="4">
                        <MudButton OnClick="@(() => UpdateAction(file, OptionFor))" Variant="Variant.Filled" Color="Color.Primary">
                            Update
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    Name
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context</MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="Name">
                    <MudTextField T="string" @bind-value="@context"></MudTextField>
                </MudTd>
            </RowEditingTemplate>
        </MudTable>
    </ChildContent>
</MudExpansionPanel>

@code {
    [Parameter]
    public string OptionName { get; set; } = string.Empty;

    [Parameter]
    public List<string> Options { get; set; } = new();

    [Parameter]
    public TItem OptionFor { get; set; } = default!;

    [Parameter]
    public Action<IBrowserFile, TItem> UpdateAction { get; set; } = default!;

    private IBrowserFile file;
    private List<string> EditOptions = new();

    private void InputFileChanged(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    protected async override Task OnParametersSetAsync()
    {
        EditOptions = Options;
        await base.OnParametersSetAsync();
    }
}
